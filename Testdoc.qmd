## This QMD file serves as a place to test code before applying it to the application. Has no actual production value; think of it as scratch paper.


```{r load-libraries}
library(tidyverse)
library(lubridate)
library(plotly)
```

```{r data-read}
testfile <- read.csv("Test_Data/markerexport1.csv", sep = ";") |>
  rename(
    "Start_Time" = "StartTime..MM.dd.yyyy.HH.mm.ss.fff.",
    "End_Time" = "EndTime..MM.dd.yyyy.HH.mm.ss.fff."
  ) |>
  select(-End_Time)
```

```{r change_column_format}
parse_date_with_millis <- function(date_string) {
  ymd_hms(date_string, tz = "UTC", quiet = TRUE)
}

testfile$Start_Time <- lubridate::fast_strptime(testfile$Start_Time, format = "%m/%d/%Y %H:%M:%OS", tz = "UTC")
testfile$End_Time <- lubridate::fast_strptime(testfile$End_Time, format = "%m/%d/%Y %H:%M:%OS", tz = "UTC")
```

```{r extract_milliseconds}
extract_seconds_milliseconds <- function(datetime_string) {
  str_extract(datetime_string, "\\d{2}\\.\\d{3}$")
}

# Apply the function to Start_Time and End_Time columns
testfile$Start_Seconds_Milliseconds <- sapply(testfile$Start_Time, extract_seconds_milliseconds)
testfile$End_Seconds_Milliseconds <- sapply(testfile$End_Time, extract_seconds_milliseconds)


testfile <- testfile |>
  mutate(
    Start_Seconds_Milliseconds = as.numeric(Start_Seconds_Milliseconds),
    End_Seconds_Milliseconds = as.numeric(End_Seconds_Milliseconds),
    Milliseconds_Difference = End_Seconds_Milliseconds - Start_Seconds_Milliseconds
  )
  
#### Below here is the important part.

extract_time <- function(datetime_string) {
  str_extract(datetime_string, "\\d{2}:\\d{2}:\\d{2}\\.\\d{3}")
}

# Apply the function to Start_Time column and create a new column
testfile <- testfile |>
  mutate(Start_Time_HHMMSSMS = sapply(Start_Time, extract_time))

# Function to convert HH:MM:SS.MS to milliseconds
convert_to_milliseconds <- function(time_string) {
  parts <- str_split(time_string, "[:.]")[[1]]
  hours <- as.numeric(parts[1])
  minutes <- as.numeric(parts[2])
  seconds <- as.numeric(parts[3])
  milliseconds <- as.numeric(parts[4])
  
  total_milliseconds <- (hours * 3600000) + (minutes * 60000) + (seconds * 1000) + milliseconds
  return(total_milliseconds)
}

# Apply the function to Start_Time_HHMMSSMS column and create a new column
testfile <- testfile |>
  mutate(Start_Time_HHMMSSMS = sapply(Start_Time, extract_time)) |>
  mutate(Start_Time_Milliseconds = sapply(Start_Time_HHMMSSMS, convert_to_milliseconds))
```

```{r final-streamlined-code}
extract_time <- function(datetime_string) {
  str_extract(datetime_string, "\\d{2}:\\d{2}:\\d{2}\\.\\d{3}")
}

# Apply the function to Start_Time column and create a new column
testfile <- testfile |>
  mutate(Start_Time_HHMMSSMS = sapply(Start_Time, extract_time))

# Function to convert HH:MM:SS.MS to milliseconds
convert_to_milliseconds <- function(time_string) {
  parts <- str_split(time_string, "[:.]")[[1]]
  hours <- as.numeric(parts[1])
  minutes <- as.numeric(parts[2])
  seconds <- as.numeric(parts[3])
  milliseconds <- as.numeric(parts[4])
  
  total_milliseconds <- (hours * 3600000) + (minutes * 60000) + (seconds * 1000) + milliseconds
  return(total_milliseconds)
}

# Apply the function to Start_Time_HHMMSSMS column and create a new column
testfile <- testfile |>
  mutate(Start_Time_HHMMSSMS = sapply(Start_Time, extract_time)) |>
  mutate(Start_Time_Milliseconds = sapply(Start_Time_HHMMSSMS, convert_to_milliseconds))
```

```{r acc-test}
acctest <- read.csv("Test_Data/AccelerometerTest.csv", sep = ";")

accgraph <- read.csv("Test_Data/Just_Accelerometer_for_Graph_Tests.csv", sep = ",")
```

```{r plotly-accelerometer}
acceleration_plotly <- plot_ly(accgraph, x = ~Time_Elapsed_MS) |>
  add_lines(y = ~IMUAccelerometerX, name = 'Accelerometer X', line = list(color = 'blue2', width = 2), opacity = 0.5) |>
  add_lines(y = ~IMUAccelerometerY, name = 'Accelerometer Y', line = list(color = 'purple', width = 2), opacity = 0.5) |>
  add_lines(y = ~IMUAccelerometerZ, name = 'Accelerometer Z', line = list(color = 'green', width = 2), opacity = 0.5) |>
  layout(
    title = 'Accelerometer Data',
    xaxis = list(title = 'Time Elapsed (ms)'),
    yaxis = list(title = 'Acceleration', range = c(-36000, 36000)),
    template = 'plotly_white'
  )

# Display the plot
acceleration_plotly
```

```{r ImpWav-Read}
ImpWav <- read.csv("Test_Data/Impedance-Waveform_Test.csv", sep = ",")
```

```{r ImpWav-Graph}
ImpWav_filtered_waveform <- ImpWav |> filter(!is.na(StimulationWaveform))
ImpWav_filtered_impedance <- ImpWav |> filter(!is.na(TransthoracicImpedance))

# Create the plot with both variables on different y-axes and specified settings
ImpWav_Plotly <- plot_ly() |>
  add_lines(
    x = ~ImpWav_filtered_waveform$Time_Elapsed_MS,
    y = ~ImpWav_filtered_waveform$StimulationWaveform,
    name = 'Stimulation Waveform',
    line = list(color = 'gold', opacity = 0.5),
    yaxis = 'y1'
  ) |>
  add_lines(
    x = ~ImpWav_filtered_impedance$Time_Elapsed_MS,
    y = ~ImpWav_filtered_impedance$TransthoracicImpedance,
    name = 'Transthoracic Impedance',
    line = list(color = 'green', opacity = 0.5),
    yaxis = 'y2'
  ) |>
  layout(
    yaxis = list(
      title = 'Stimulation Waveform',
      range = c(0, 8000),
      autorange = TRUE
    ),
    yaxis2 = list(
      title = 'Transthoracic Impedance',
      overlaying = 'y',
      side = 'right',
      standoff = 15,
      range = c(0, 8000),
      autorange = TRUE
    ),
    xaxis = list(title = 'Time Elapsed (MS)'),
    legend = list(orientation = 'h'),
    height = 900
  )

# Show the plot
ImpWav_Plotly

########### ggplot test:
# ImpWav |> filter(!is.na(StimulationWaveform)) |> 
#   ggplot(aes(x = Time_Elapsed_MS, y = StimulationWaveform)) +
#   geom_line()
# 
# ImpWav |> filter(!is.na(TransthoracicImpedance)) |> 
#   ggplot(aes(x = Time_Elapsed_MS, y = TransthoracicImpedance)) +
#   geom_line()

########### plotly plot:
```

```{r position-data-load}
positions <- read.csv("Test_Data/OrientationDataJustAccelerometer.csv", sep = ",")
```

```{r incline-data-mutate}
# Min values for 1g are -16,383, max values are 16,383 +-(2^14). Under a standard gravity of 1g, values outside these bounds indicate some kind of movement rather than pure position.

incline <- positions |> 
  # Floor divide to convert values between -2^14 and 2^14 to -90 to 90.
  mutate(InclineDegrees = floor(IMUAccelerometerZ / 182)) |> 
  # Values within 10 degrees of 0 or 90 converted to 0 or 90 so that minor movement doesn't throw things off.
  mutate(InclineDegrees = case_when(
    InclineDegrees >= 91 & InclineDegrees <= 100 ~ 90,
    InclineDegrees >= -10 & InclineDegrees <= -1 ~ 0,
    TRUE ~ InclineDegrees)) |> 
  # Values outside the new 0-90 range converted to NA because we don't care about them.
  mutate(InclineDegrees = ifelse(InclineDegrees < 0 | InclineDegrees > 90, NA, InclineDegrees)) |>
  # Remaning values modified to be the absolute value of their former value -90 (flips the ends of the range,
  # since 2^14 refers to 0, not 90 degrees).
  mutate(InclineDegrees = abs(InclineDegrees - 90)) |>
  # Add new column `InclinePosition` with categorical variables based on degrees.
  mutate(InclinePosition = case_when(
    is.na(InclineDegrees) ~ "OOB",
    InclineDegrees >= 0 & InclineDegrees <= 25 ~ "Flat",
    InclineDegrees >= 26 & InclineDegrees <= 45 ~ "Shallow_Incline",
    InclineDegrees >= 46 & InclineDegrees <= 65 ~ "Steep_Incline",
    InclineDegrees >= 66 & InclineDegrees <= 90 ~ "Upright")) |>
  # Reorder levels for InclinePosition
  mutate(InclinePosition = factor(InclinePosition, levels = c("OOB", "Upright", "Steep_Incline", "Shallow_Incline", "Flat")))
  

# To-do: Maybe make two OOB values, one for above 90 and one for below?
```

```{r incline-data-graph}
ggplot(incline, aes(x = Time_Elapsed_MS, y = InclineDegrees, color = InclinePosition, group = 1)) +
  geom_line(size = 0.5) +
  scale_y_continuous(limits = c(0, 105), breaks = seq(0, 105, by = 15)) +
  scale_color_manual(values = c(
    "Flat" = "green",
    "Shallow_Incline" = "blue",
    "Steep_Incline" = "yellow",
    "Upright" = "orange",
    "OOB" = "red"
  )) +
  labs(color = "Incline Position") +
  theme(legend.position = "right") +
  theme_minimal()

ggplot(incline, aes(x = Time_Elapsed_MS, y = InclinePosition, color = InclinePosition, group = 1)) +
  geom_line(size = 0.5) +
  scale_y_discrete(limits = c("OOB", "Upright", "Steep_Incline", "Shallow_Incline", "Flat")) +
  scale_color_manual(values = c(
    "Flat" = "green",
    "Shallow_Incline" = "blue",
    "Steep_Incline" = "yellow",
    "Upright" = "orange",
    "OOB" = "red"
  )) +
  labs(color = "Incline Position", y = "Incline Position", x = "Time Elapsed (MS)") +
  theme(legend.position = "right") +
  theme_minimal()
```
```{r side-data-mutate}
sides <- positions |>
  # Convert values between 16384 and 18000 to 16383, and values between -16384 and -18000 to -16383
  mutate(
    IMUAccelerometerX = ifelse(IMUAccelerometerX >= 16384 & IMUAccelerometerX <= 18000, 16383, IMUAccelerometerX),
    IMUAccelerometerZ = ifelse(IMUAccelerometerZ >= 16384 & IMUAccelerometerZ <= 18000, 16383, IMUAccelerometerZ),
    IMUAccelerometerX = ifelse(IMUAccelerometerX <= -16384 & IMUAccelerometerX >= -18000, -16383, IMUAccelerometerX),
    IMUAccelerometerZ = ifelse(IMUAccelerometerZ <= -16384 & IMUAccelerometerZ >= -18000, -16383, IMUAccelerometerZ)) |>
  # Convert values above 18000 and below -18000 to NA
  mutate(
    IMUAccelerometerX = ifelse(IMUAccelerometerX > 18000 | IMUAccelerometerX < -18000, NA, IMUAccelerometerX),
    IMUAccelerometerZ = ifelse(IMUAccelerometerZ > 18000 | IMUAccelerometerZ < -18000, NA, IMUAccelerometerZ)) |>
  # Create new column `Side`
  mutate(
    Side = case_when(
      IMUAccelerometerZ >= 8192 & IMUAccelerometerZ <= 16383 ~ "Back",
      IMUAccelerometerZ <= -8192 & IMUAccelerometerZ >= -16383 ~ "Stomach",
      IMUAccelerometerX >= 8192 & IMUAccelerometerX <= 16383 ~ "Left",
      IMUAccelerometerX <= -8192 & IMUAccelerometerX >= -16383 ~ "Right",
      TRUE ~ NA_character_)) |>
  # Order factor levels (in order of the sequence used when acquiring test data).
  mutate(Side = factor(Side, levels = c("Back", "Right", "Stomach", "Left", NA)))
```

```{r side-data-graph}
ggplot(sides, aes(x = Time_Elapsed_MS, y = Side, group = 1, color = is.na(Side))) +
  geom_line(size = 0.5, show.legend = FALSE) +
  scale_y_discrete(drop = FALSE) + # Ensure NA is included in the y-axis
  scale_color_manual(values = c("TRUE" = "red", "FALSE" = "black")) +
  labs(y = "Side", x = "Time Elapsed (MS)") +
  theme(legend.position = "none") +
  theme_minimal()
```

